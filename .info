# Guía de Deploy - Chromia

## Problema Actual en Railway
Railway no puede detectar automáticamente qué deployar porque tenemos tanto `client` como `server` en la raíz del proyecto.

## ERROR BCRYPT - SOLUCIÓN
**Error**: `invalid ELF header` con bcrypt
**Causa**: bcrypt compilado para Windows, no compatible con Linux de Railway
**Solución**: Añadir script de rebuild en package.json

### Actualizar server/package.json
```json
{
  "scripts": {
    "start": "node server.js",
    "dev": "node --watch server.js",
    "build": "npm rebuild bcrypt --build-from-source",
    "postinstall": "npm rebuild bcrypt --build-from-source",
    "test": "echo \"Error: no test specified\" && exit 1"
  }
}
```

### Alternativa: Usar bcryptjs (Recomendado)
Reemplazar bcrypt con bcryptjs (más compatible):
```bash
cd server
npm uninstall bcrypt
npm install bcryptjs
```

Luego actualizar imports en controladores:
```javascript
// Cambiar: import bcrypt from 'bcrypt';
// Por: import bcrypt from 'bcryptjs';
```

## Solución para Railway

### Opción 1: Configurar Root Directory (Recomendado)
1. En Railway, ve a tu proyecto
2. Ve a "Settings" → "Service Settings"
3. En "Root Directory" pon: `server`
4. En "Build Command" pon: `npm install && npm rebuild bcrypt --build-from-source`
5. En "Start Command" pon: `npm start`
6. Redeploy

### Opción 2: Crear railway.json
Crear archivo `railway.json` en la raíz:
```json
{
  "build": {
    "builder": "nixpacks",
    "buildCommand": "cd server && npm install && npm rebuild bcrypt --build-from-source"
  },
  "deploy": {
    "startCommand": "cd server && npm start",
    "restartPolicyType": "ON_FAILURE",
    "restartPolicyMaxRetries": 10
  }
}
```

## Deploy Completo - Paso a Paso

### 1. Preparar Backend para Railway

#### Crear archivo .env en server/
```env
MONGODB_URI=mongodb://localhost:27017/chromia
JWT_SECRET=tu_clave_secreta_super_segura_aqui
PORT=3000
```

#### Actualizar CORS en server/server.js
```javascript
const allowedOrigins = [
    'http://localhost:5173', // Development
    'https://tu-app.vercel.app', // Production - actualizar con URL real
    /^http:\/\/192\.168\.\d{1,3}\.\d{1,3}:5173$/,
    /^http:\/\/10\.\d{1,3}\.\d{1,3}\.\d{1,3}:5173$/,
    /^http:\/\/172\.(1[6-9]|2[0-9]|3[0-1])\.\d{1,3}\.\d{1,3}:5173$/
];
```

### 2. Deploy Backend en Railway

1. Ir a railway.app y crear cuenta
2. "Deploy from GitHub repo"
3. Seleccionar repositorio Chromia
4. **IMPORTANTE**: En Settings → Service Settings:
   - Root Directory: `server`
   - Build Command: `npm install && npm rebuild bcrypt --build-from-source`
   - Start Command: `npm start`
5. Añadir base de datos:
   - "Add Service" → "Database" → "MongoDB"
6. Configurar variables de entorno:
   - `MONGODB_URI`: (copiar de la base de datos creada)
   - `JWT_SECRET`: (clave secreta fuerte)

### 3. Preparar Frontend para Vercel

#### Actualizar API URL en client/src/context/app_context.jsx
```javascript
const getApiBaseUrl = () => {
    const currentHost = window.location.hostname;
    
    // Production environment (Vercel)
    if (currentHost.includes('vercel.app')) {
        return 'https://tu-railway-app.railway.app/api'; // Actualizar con URL real
    }
    
    // Development
    if (currentHost === 'localhost' || currentHost === '127.0.0.1') {
        return 'http://localhost:3000/api';
    }
    
    // Network IP
    return `http://${currentHost}:3000/api`;
};
```

### 4. Deploy Frontend en Vercel

```bash
# Instalar Vercel CLI
npm install -g vercel

# Ir a carpeta client
cd client

# Login en Vercel
vercel login

# Deploy
vercel

# Para deploys futuros
vercel --prod
```

### 5. Conectar Frontend y Backend

1. **Obtener URLs**:
   - Railway: `https://tu-app.railway.app`
   - Vercel: `https://tu-app.vercel.app`

2. **Actualizar configuraciones**:
   - En frontend: actualizar `getApiBaseUrl()` con URL real de Railway
   - En backend: actualizar CORS con URL real de Vercel

3. **Redeploy**:
   ```bash
   git add .
   git commit -m "Configure for production"
   git push
   ```

### 6. Comandos Útiles

```bash
# Deploy rápido frontend
cd client && vercel --prod

# Ver logs Railway
# (desde el dashboard de Railway)

# Verificar funcionamiento
curl https://tu-railway-app.railway.app/health

# Rebuild bcrypt localmente (si es necesario)
cd server && npm rebuild bcrypt --build-from-source
```

## Troubleshooting

### Error "Nixpacks build failed"
- Configurar Root Directory en Railway como `server`
- O crear railway.json en la raíz

### Error "invalid ELF header" con bcrypt
- Añadir rebuild command en package.json
- O usar bcryptjs en lugar de bcrypt
- Configurar Build Command en Railway: `npm install && npm rebuild bcrypt --build-from-source`

### Error CORS
- Verificar que las URLs en allowedOrigins sean correctas
- Incluir tanto http como https según corresponda

### Error de conexión a base de datos
- Verificar que MONGODB_URI esté configurado correctamente
- Verificar que la base de datos esté corriendo en Railway

### Frontend no conecta con backend
- Verificar que getApiBaseUrl() retorne la URL correcta
- Verificar que el backend esté corriendo y accesible

## URLs Importantes
- Railway Dashboard: https://railway.app/dashboard
- Vercel Dashboard: https://vercel.com/dashboard
- Nixpacks Docs: https://nixpacks.com

## Comandos de Emergencia

### Si bcrypt sigue fallando
```bash
cd server
npm uninstall bcrypt
npm install bcryptjs
# Luego actualizar imports en userController.js
```

### Limpiar node_modules y reinstalar
```bash
cd server
rm -rf node_modules package-lock.json
npm install
```